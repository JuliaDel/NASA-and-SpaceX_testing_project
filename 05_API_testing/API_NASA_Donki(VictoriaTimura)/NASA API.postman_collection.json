{
	"info": {
		"_postman_id": "4e83d38b-36b2-46b1-b043-c9435d8c951a",
		"name": "NASA API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34705707"
	},
	"item": [
		{
			"name": "Donki(Coronal Mass Ejection (CME) Analysis)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 2000 B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Header is correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Access-Control-Allow-Origin\", \"*\");\r",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate\");\r",
							"    pm.response.to.have.header(\"Pragma\", \"no-cache\");\r",
							"    pm.response.to.have.header(\"Vary\", \"Accept-Encoding\");\r",
							"    pm.response.to.have.header(\"Via\", \"https/1.1 api-umbrella (ApacheTrafficServer [cMsSf ])\");\r",
							"    pm.response.to.have.header(\"X-Cache\", \"MISS\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"    pm.response.to.have.header(\"X-Ratelimit-Limit\", \"40\");\r",
							"    pm.response.to.have.header(\"X-Xss-Protection\", \"1; mode=block\");\r",
							"    pm.response.to.have.header(\"X-Frame-Options\", \"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function () {\r",
							"    let jsonResponse = pm.response.json();\r",
							"  \r",
							"    pm.expect(jsonResponse[0].type).to.be.a('string');   \r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Validate the schema of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('time21_5');\r",
							"        pm.expect(item).to.have.property('latitude');\r",
							"        pm.expect(item).to.have.property('longitude');\r",
							"        pm.expect(item).to.have.property('halfAngle');\r",
							"        pm.expect(item).to.have.property('speed');\r",
							"        pm.expect(item).to.have.property('type');\r",
							"        pm.expect(item).to.have.property('isMostAccurate');\r",
							"        pm.expect(item).to.have.property('associatedCMEID');\r",
							"        pm.expect(item).to.have.property('note');\r",
							"        pm.expect(item).to.have.property('catalog');\r",
							"        pm.expect(item).to.have.property('featureCode');\r",
							"        pm.expect(item).to.have.property('dataLevel');\r",
							"        pm.expect(item).to.have.property('measurementTechnique');\r",
							"        pm.expect(item).to.have.property('imageType');\r",
							"        pm.expect(item).to.have.property('tilt');\r",
							"        pm.expect(item).to.have.property('minorHalfWidth');\r",
							"        pm.expect(item).to.have.property('speedMeasuredAtHeight');\r",
							"        pm.expect(item).to.have.property('submissionTime');\r",
							"        pm.expect(item).to.have.property('versionId');\r",
							"        pm.expect(item).to.have.property('link');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Latitude and longitude values are within valid ranges\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.latitude).to.be.within(-90, 90);\r",
							"        pm.expect(item.longitude).to.be.within(-180, 180);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"IsMostAccurate field is always true\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function(entry) {\r",
							"        pm.expect(entry.isMostAccurate).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response body\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  responseData.forEach((item) => {\r",
							"    pm.expect(item).to.be.an('object');\r",
							"    pm.expect(item).to.have.property('time21_5');\r",
							"    pm.expect(item).to.have.property('latitude');\r",
							"    pm.expect(item).to.have.property('longitude');\r",
							"    pm.expect(item).to.have.property('halfAngle');\r",
							"    pm.expect(item).to.have.property('speed');\r",
							"    pm.expect(item).to.have.property('type');\r",
							"    pm.expect(item).to.have.property('isMostAccurate');\r",
							"    pm.expect(item).to.have.property('associatedCMEID');\r",
							"    pm.expect(item).to.have.property('note');\r",
							"    pm.expect(item).to.have.property('catalog');\r",
							"    pm.expect(item).to.have.property('featureCode');\r",
							"    pm.expect(item).to.have.property('dataLevel');\r",
							"    pm.expect(item).to.have.property('measurementTechnique');\r",
							"    pm.expect(item).to.have.property('imageType');\r",
							"    pm.expect(item).to.have.property('tilt');\r",
							"    pm.expect(item).to.have.property('minorHalfWidth');\r",
							"    pm.expect(item).to.have.property('speedMeasuredAtHeight');\r",
							"    pm.expect(item).to.have.property('submissionTime');\r",
							"    pm.expect(item).to.have.property('versionId');\r",
							"    pm.expect(item).to.have.property('link');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Latitude and longitude values are within valid ranges\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.latitude).to.be.within(-90, 90);\r",
							"        pm.expect(item.longitude).to.be.within(-180, 180);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/DONKI/CMEAnalysis?startDate=2016-09-01&endDate=2016-09-30&mostAccurateOnly=true&speed=500&halfAngle=30&catalog=ALL&api_key=DEMO_KEY",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"DONKI",
						"CMEAnalysis"
					],
					"query": [
						{
							"key": "startDate",
							"value": "2016-09-01"
						},
						{
							"key": "endDate",
							"value": "2016-09-30"
						},
						{
							"key": "mostAccurateOnly",
							"value": "true"
						},
						{
							"key": "speed",
							"value": "500"
						},
						{
							"key": "halfAngle",
							"value": "30"
						},
						{
							"key": "catalog",
							"value": "ALL"
						},
						{
							"key": "api_key",
							"value": "DEMO_KEY"
						},
						{
							"key": null,
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}