{
	"info": {
		"_postman_id": "7be8bb23-809d-4446-a617-0693d7606122",
		"name": "NASA_Epic_VolhaBratuhin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34748278"
	},
	"item": [
		{
			"name": "Epic_Collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validate status code\r",
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"//Validate the response time\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"//Validate the response size\r",
							"pm.test(\"Response size is less than 50KB\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(51200);\r",
							"});\r",
							"\r",
							"//Response should be okay to process\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"//Verify response headers\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Cache-Control\", \"no-cache, private\");\r",
							"    pm.response.to.have.header(\"Content-Encoding\", \"gzip\");\r",
							"    pm.response.to.have.header(\"X-Cache\", \"MISS\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"    pm.response.to.have.header(\"X-Frame-Options\", \"DENY\");\r",
							"});\r",
							"\r",
							"//Verify response body\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"identifier\");\r",
							"    pm.expect(pm.response.text()).to.include(\"caption\");\r",
							"    pm.expect(pm.response.text()).to.include(\"dscovr_j2000_position\");\r",
							"    pm.expect(pm.response.text()).to.include(\"lunar_j2000_position\");\r",
							"    pm.expect(pm.response.text()).to.include(\"sun_j2000_position\");\r",
							"});\r",
							"\r",
							"//Verify response body format\r",
							"// pm.test(\"Response body should be in the correct format\", function() {\r",
							"//     let jsonResponse = pm.response.json();\r",
							"//     pm.expect(jsonResponse.caption).to.be.a('');\r",
							"    \r",
							"// });\r",
							"\r",
							"// Check for top-level fields\r",
							"// pm.test(\"Verify response body format\", function () {\r",
							"//     const responseData = pm.response.json();\r",
							"//     pm.expect(responseData).to.have.property([image]).that.is.an('array');\r",
							"// });\r",
							"\r",
							"//Verify the length of the response data\r",
							"pm.test(\"The response data length must be greater than zero\", function () {\r",
							" \tconst responseData = pm.response.json();\r",
							"     pm.expect(Object.keys(responseData).length).to.be.above(0, \"Response data should not be empty\");\r",
							" });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "geZap7Wj5ByJHCURlVxQZHdnedSFvXb8CBcgzjdq",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/EPIC/api/natural/images?api_key=geZap7Wj5ByJHCURlVxQZHdnedSFvXb8CBcgzjdq",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"EPIC",
						"api",
						"natural",
						"images"
					],
					"query": [
						{
							"key": "api_key",
							"value": "geZap7Wj5ByJHCURlVxQZHdnedSFvXb8CBcgzjdq"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "np0OfACZmMZmz6ieujDvEYRW0kz56X22o7zbursc",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}