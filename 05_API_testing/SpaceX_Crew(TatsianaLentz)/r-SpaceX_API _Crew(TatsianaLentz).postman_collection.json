{
	"info": {
		"_postman_id": "f9c5c5c7-6c14-4d4c-9f63-80f71529dd34",
		"name": "r/SpaceX_API _Crew(TatsianaLentz)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34701056"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Get all Crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"CrewMember\", jsonData[0].id);\r",
									"\r",
									"if(pm.response.code === 200) {\r",
									"    pm.test[\"Backend is available, response code is 200\"] = true;\r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test[\"Forbiden\"] = false;\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test[\"Not Found. Check if you made correct request\"] = false;\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test[\"he instance is not valid\"] = false;\r",
									"} else {\r",
									"    pm.test[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"1466\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=300\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.include(\"gzip\");\r",
									"    pm.expect(pm.response.headers.get(\"etag\")).to.include('\"1ba2-nV2GK6TuF/zcisgoPolEzz0PZn0\"');\r",
									"    pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"    pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"    pm.expect(pm.response.headers.get(\"spacex-api-cache-online\")).to.include(\"true\");\r",
									"    pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"    pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"    pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"    pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"    pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"    pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"    pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"    pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"    pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"   \r",
									"\r",
									"});\r",
									"\r",
									"// Test the response body structure and values\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"\r",
									"    // Check if the response is an array\r",
									"    pm.expect(responseJSON).to.be.an('array');\r",
									"\r",
									"    // Check the structure of each object in the array\r",
									"    responseJSON.forEach((crewMember) => {\r",
									"        pm.expect(crewMember).to.have.property('name');\r",
									"        pm.expect(crewMember).to.have.property('agency');\r",
									"        pm.expect(crewMember).to.have.property('image');\r",
									"        pm.expect(crewMember).to.have.property('wikipedia');\r",
									"        pm.expect(crewMember).to.have.property('launches').that.is.an('array');\r",
									"        pm.expect(crewMember).to.have.property('status');\r",
									"        pm.expect(crewMember).to.have.property('id');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Each crew member have status 'active'\", function () {\r",
									"    pm.response.json().forEach((crewMember) => {\r",
									"        pm.expect(crewMember.status).to.be.a('string').and.to.equal(\"active\");\r",
									"    });\r",
									"});\r",
									"pm.test(\"Each crew member has a non-empty name\", function () {\r",
									"    pm.response.json().forEach((crewMember) => {\r",
									"        pm.expect(crewMember.name).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(crewMember.wikipedia).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(crewMember.agency).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(crewMember.image).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(crewMember.status).to.be.a('string').and.to.not.be.empty;\r",
									"        pm.expect(crewMember.id).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Crew Member",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idCrewMember = [\r",
									"'5ebf1a6e23a9a60006e03a7a','5ebf1b7323a9a60006e03a7b','5f7f1543bf32c864a529b23e','5f7f158bbf32c864a529b23f','5f7f15d5bf32c864a529b240','5f7f1614bf32c864a529b241','5fe3ba5fb3467846b3242188','5fe3bb01b3467846b3242189','5fe3bc3db3467846b324218b','5fe3bc8ab3467846b324218c','5fe3c587b3467846b3242198','5fe3c5beb3467846b3242199','5fe3c5f6b3467846b324219a',\r",
									" '607a3a5f5a906a44023e0870','607a3ab45a906a44023e0872','607b48375a906a44023e08b8','607b48da5a906a44023e08b9','60c4b5ad4e041c0b356db393','61eefc9c9eb1064137a1bd77','61eefcf89eb1064137a1bd79','61eefd5b9eb1064137a1bd7a','61eefdbf9eb1064137a1bd7b','6243bc5baf52800c6e919276','6243bcdcaf52800c6e919277','6243bd7baf52800c6e919278','6243bdf8af52800c6e919279',\r",
									" '62dd7196202306255024d13c','62dd71c9202306255024d13d','62dd7210202306255024d13e','62dd7253202306255024d13f'\r",
									"];\r",
									"\r",
									"const randomCrewMember = idCrewMember [Math.floor(Math.random() * idCrewMember.length)];\r",
									"pm.environment.set(\"CrewMember\",randomCrewMember );\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 200) {\r",
									"    pm.test(\"Backend is available, response code is 200\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Not Found\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test(\"Forbiden\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\" Check if you made correct request\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test(\"The instance is not valid\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Something went wrong. Check response body\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.include(\"chunked\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"   pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=300\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.include(\"br\");\r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"   pm.expect(pm.response.headers.get(\"spacex-api-cache-online\")).to.include(\"true\");\r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"  pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									"\r",
									"// Test the response body structure and values\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"\r",
									"    // Check if the response is an object\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"\r",
									"    // Check the structure of the object\r",
									"    pm.expect(responseJSON).to.have.property('name');\r",
									"    pm.expect(responseJSON).to.have.property('agency');\r",
									"    pm.expect(responseJSON).to.have.property('image');\r",
									"    pm.expect(responseJSON).to.have.property('wikipedia');\r",
									"    pm.expect(responseJSON).to.have.property('launches').that.is.an('array');\r",
									"    pm.expect(responseJSON).to.have.property('status');\r",
									"    pm.expect(responseJSON).to.have.property('id');\r",
									"});\r",
									"\r",
									"pm.test(\"Crew member has status 'active'\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.a('string').and.to.equal(\"active\");\r",
									"});\r",
									"\r",
									"pm.test(\"Crew member has a non-empty name\", function () {\r",
									"    const crewMember = pm.response.json();\r",
									"    pm.expect(crewMember.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.wikipedia).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.agency).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.image).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.id).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ID CrewMember is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"CrewMember\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/{{CrewMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{CrewMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Crew Members",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 200) {\r",
									"    pm.test(\"Backend is available, response code is 200\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Bad Request\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test(\"Forbiden\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\" Check if you made correct request\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test(\"The instance is not valid\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Something went wrong. Check response body\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"405\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"   pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=300\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.include(\"gzip\");\r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"   pm.expect(pm.response.headers.get(\"spacex-api-cache-online\")).to.include(\"true\");\r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"  pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									"\r",
									"// Test the response body structure and values\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"\r",
									"}); \r",
									"\r",
									"pm.test(\"Agency is 'Jaxa'\", function () {\r",
									"    pm.expect(pm.response.json().docs[0].agency).to.be.a('string').and.to.equal(\"JAXA\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Agency is in response\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"Agency\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Crew member has a non-empty name\", function () {\r",
									"    const crewMember = pm.response.json().docs[0];\r",
									"    pm.expect(crewMember.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.wikipedia).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.agency).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.image).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.id).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Crew member has a non-empty name\", function () {\r",
									"    const crewMember = pm.response.json().docs[0];\r",
									"    pm.expect(crewMember.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.wikipedia).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.agency).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.image).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.status).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(crewMember.id).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": {\r\n        \"agency\": {{Agency}}\r\n    },\r\n    \"options\": {\r\n        \"sort\": {\r\n            \"name\": \"asc\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/query",
							"host": [
								"{{URL}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Get all Crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 200) {\r",
									"    pm.test[\"Backend is available, response code is 200\"] = false;\r",
									"} else if (pm.response.code === 401) {\r",
									"    pm.test[\"Not authorised, check access token or Log in\"] = false;\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test[\"Forbiden\"] = false;\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test[\"Not Found. Check if you made correct request\"] = true;\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test[\"he instance is not valid\"] = false;\r",
									"} else {\r",
									"    pm.test[\"Something went wrong. Check response body\"] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound\r",
									"    pm.response.to.be.a.string\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"9\");\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.include(\"keep-alive\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"    pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"    pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"    pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"    pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"    pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"    pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"    pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"    pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"    pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"    pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"    pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"    pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"    pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"   \r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Body not found\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL_without_crew}}",
							"host": [
								"{{URL_without_crew}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one Crew Member",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idCrewMember = [\r",
									"'5ebf1a6e23a9a60006e03a7a','5ebf1b7323a9a60006e03a7b','5f7f1543bf32c864a529b23e','5f7f158bbf32c864a529b23f','5f7f15d5bf32c864a529b240','5f7f1614bf32c864a529b241','5fe3ba5fb3467846b3242188','5fe3bb01b3467846b3242189','5fe3bc3db3467846b324218b','5fe3bc8ab3467846b324218c','5fe3c587b3467846b3242198','5fe3c5beb3467846b3242199','5fe3c5f6b3467846b324219a',\r",
									" '607a3a5f5a906a44023e0870','607a3ab45a906a44023e0872','607b48375a906a44023e08b8','607b48da5a906a44023e08b9','60c4b5ad4e041c0b356db393','61eefc9c9eb1064137a1bd77','61eefcf89eb1064137a1bd79','61eefd5b9eb1064137a1bd7a','61eefdbf9eb1064137a1bd7b','6243bc5baf52800c6e919276','6243bcdcaf52800c6e919277','6243bd7baf52800c6e919278','6243bdf8af52800c6e919279',\r",
									" '62dd7196202306255024d13c','62dd71c9202306255024d13d','62dd7210202306255024d13e','62dd7253202306255024d13f'\r",
									"];\r",
									"const randomCrewMember = idCrewMember [Math.floor(Math.random() * idCrewMember.length)];\r",
									"\r",
									"const WrongCrewMember = randomCrewMember+\"z\"\r",
									"pm.environment.set(\"NotExistingCrewMember\",WrongCrewMember );\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 200) {\r",
									"    pm.test(\"Backend is available, response code is 200\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Error\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test(\"Forbiden\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\" Not Found\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test(\"The instance is not valid\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Something went wrong. Check response body\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.response.to.be.a.string;\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"   \r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"   pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=300\");\r",
									"   \r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"   pm.expect(pm.response.headers.get(\"spacex-api-cache-online\")).to.include(\"true\");\r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"  pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									"\r",
									"\r",
									" pm.test(\"Body not found\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									"  \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/{{NotExistingCrewMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{NotExistingCrewMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Crew Members",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code === 200) {\r",
									"    pm.test(\"Backend is available, response code is 200\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Bad Request\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 403) {\r",
									"    pm.test(\"Forbiden\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Not Found\", function () {\r",
									"        pm.expect(true).to.be.true;\r",
									"    });\r",
									"} else if (pm.response.code === 422) {\r",
									"    pm.test(\"The instance is not valid\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Something went wrong. Check response body\", function () {\r",
									"        pm.expect(false).to.be.false;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.notFound;\r",
									"    pm.response.to.be.a.string;\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"9\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');\r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");\r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									" \r",
									"  pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body not found\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": {\r\n        \"agency\": {{Agency}}\r\n    },\r\n    \"options\": {\r\n        \"sort\": {\r\n            \"name\": \"asc\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_without_crew}}/query",
							"host": [
								"{{URL_without_crew}}"
							],
							"path": [
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Crew Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific video\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains MagicWord video\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"MagicWordVideo\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"28\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');  \r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");   \r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									"   pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mike Smith\",\r\n    \"agency\": \"SpaceX\",\r\n    \"image\": \"\",\r\n    \"wikipedia\": \"\",\r\n    \"status\": \"active\",\r\n    \"id\": \"{{NotExistingCrewMember}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Crew Member",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idCrewMember = [\r",
									"'5ebf1a6e23a9a60006e03a7a','5ebf1b7323a9a60006e03a7b','5f7f1543bf32c864a529b23e','5f7f158bbf32c864a529b23f','5f7f15d5bf32c864a529b240','5f7f1614bf32c864a529b241','5fe3ba5fb3467846b3242188','5fe3bb01b3467846b3242189','5fe3bc3db3467846b324218b','5fe3bc8ab3467846b324218c','5fe3c587b3467846b3242198','5fe3c5beb3467846b3242199','5fe3c5f6b3467846b324219a',\r",
									" '607a3a5f5a906a44023e0870','607a3ab45a906a44023e0872','607b48375a906a44023e08b8','607b48da5a906a44023e08b9','60c4b5ad4e041c0b356db393','61eefc9c9eb1064137a1bd77','61eefcf89eb1064137a1bd79','61eefd5b9eb1064137a1bd7a','61eefdbf9eb1064137a1bd7b','6243bc5baf52800c6e919276','6243bcdcaf52800c6e919277','6243bd7baf52800c6e919278','6243bdf8af52800c6e919279',\r",
									" '62dd7196202306255024d13c','62dd71c9202306255024d13d','62dd7210202306255024d13e','62dd7253202306255024d13f'\r",
									"];\r",
									"const randomCrewMember = idCrewMember [Math.floor(Math.random() * idCrewMember.length)];\r",
									"pm.environment.set(\"CrewMember\",randomCrewMember );\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific content\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific video\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"MagicWordVideo\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"28\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');  \r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");   \r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									"   pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{CrewMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{CrewMember}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Crew Member",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idCrewMember = [\r",
									"'5ebf1a6e23a9a60006e03a7a','5ebf1b7323a9a60006e03a7b','5f7f1543bf32c864a529b23e','5f7f158bbf32c864a529b23f','5f7f15d5bf32c864a529b240','5f7f1614bf32c864a529b241','5fe3ba5fb3467846b3242188','5fe3bb01b3467846b3242189','5fe3bc3db3467846b324218b','5fe3bc8ab3467846b324218c','5fe3c587b3467846b3242198','5fe3c5beb3467846b3242199','5fe3c5f6b3467846b324219a',\r",
									" '607a3a5f5a906a44023e0870','607a3ab45a906a44023e0872','607b48375a906a44023e08b8','607b48da5a906a44023e08b9','60c4b5ad4e041c0b356db393','61eefc9c9eb1064137a1bd77','61eefcf89eb1064137a1bd79','61eefd5b9eb1064137a1bd7a','61eefdbf9eb1064137a1bd7b','6243bc5baf52800c6e919276','6243bcdcaf52800c6e919277','6243bd7baf52800c6e919278','6243bdf8af52800c6e919279',\r",
									" '62dd7196202306255024d13c','62dd71c9202306255024d13d','62dd7210202306255024d13e','62dd7253202306255024d13f'\r",
									"];\r",
									"const randomCrewMember = idCrewMember [Math.floor(Math.random() * idCrewMember.length)];\r",
									"pm.environment.set(\"CrewMember\",randomCrewMember );\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 10000B\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains specific content\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://youtu.be/RfiQYRn7fBg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains MagicWord video\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"MagicWordVideo\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Header Keys/Values check\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain; charset=utf-8\");\r",
									"   pm.expect(pm.response.headers.get(\"Content-Length\")).to.include(\"28\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-allow-origin\")).to.include(\"*\");\r",
									"   pm.expect(pm.response.headers.get(\"access-control-expose-headers\")).to.include(\"spacex-api-cache,spacex-api-response-time\");\r",
									"   pm.expect(pm.response.headers.get(\"alt-svc\")).to.include('h3=\":443\"; ma=86400');  \r",
									"   pm.expect(pm.response.headers.get(\"expect-ct\")).to.include(\"max-age=0\");\r",
									"   pm.expect(pm.response.headers.get(\"referrer-policy\")).to.include(\"no-referrer\");   \r",
									"   pm.expect(pm.response.headers.get(\"strict-transport-security\")).to.include(\"max-age=15552000; includeSubDomains\");\r",
									"   pm.expect(pm.response.headers.get(\"x-content-type-options\")).to.include(\"nosniff\");\r",
									"   pm.expect(pm.response.headers.get(\"x-dns-prefetch-control\")).to.include(\"off\");\r",
									"   pm.expect(pm.response.headers.get(\"x-download-options\")).to.include(\"noopen\");\r",
									"   pm.expect(pm.response.headers.get(\"x-frame-options\")).to.include(\"SAMEORIGIN\");\r",
									"   pm.expect(pm.response.headers.get(\"x-permitted-cross-domain-policies\")).to.include(\"none\");\r",
									"   pm.expect(pm.response.headers.get(\"x-xss-protection\")).to.include(\"0\");\r",
									"   pm.expect(pm.response.headers.get(\"CF-Cache-Status\")).to.include(\"DYNAMIC\");\r",
									"   pm.expect(pm.response.headers.get(\"NEL\")).to.include('{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}');\r",
									"    pm.expect(pm.response.headers.get(\"Server\")).to.include(\"cloudflare\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "spacex-key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{CrewMember}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{CrewMember}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}