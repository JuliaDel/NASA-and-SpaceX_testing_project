{
	"info": {
		"_postman_id": "eabba334-20ef-4baf-b7d0-fe09a3af3168",
		"name": "NASA1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34701056"
	},
	"item": [
		{
			"name": "Mars Rover Photos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.code === 200) {\r",
							"    pm.test[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (pm.response.code === 401) {\r",
							"    pm.test[\"Not authorised, check access token or Log in\"] = false;\r",
							"} else if (pm.response.code === 403) {\r",
							"    pm.test[\"Forbiden\"] = false;\r",
							"} else if (pm.response.code === 404) {\r",
							"    pm.test[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (pm.response.code === 422) {\r",
							"    pm.test[\"he instance is not valid\"] = false;\r",
							"} else {\r",
							"    pm.test[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"pm.test(\"Response time is less than 10000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response size is less than 5000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.photos).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo.id).to.exist;\r",
							"        pm.expect(photo.sol).to.exist;\r",
							"        pm.expect(photo.camera).to.exist;\r",
							"        pm.expect(photo.img_src).to.exist;\r",
							"        pm.expect(photo.earth_date).to.exist;\r",
							"        pm.expect(photo.rover).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the camera object within the photos array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.photos).to.be.an('array').that.is.not.empty;\r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo.camera).to.be.an('object');\r",
							"        pm.expect(photo.camera.id).to.be.a('number');\r",
							"        pm.expect(photo.camera.name).to.be.a('string');\r",
							"        pm.expect(photo.camera.rover_id).to.be.a('number');\r",
							"        pm.expect(photo.camera.full_name).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the rover object within the photos array contains the expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.photos).to.be.an('array');\r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo.rover).to.be.an('object');\r",
							"        pm.expect(photo.rover.id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(photo.rover.name).to.exist.and.to.be.a('string');\r",
							"        pm.expect(photo.rover.landing_date).to.exist.and.to.be.a('string');\r",
							"        pm.expect(photo.rover.launch_date).to.exist.and.to.be.a('string');\r",
							"        pm.expect(photo.rover.status).to.exist.and.to.be.a('string');\r",
							"        pm.expect(photo.rover.max_sol).to.exist.and.to.be.a('number');\r",
							"        pm.expect(photo.rover.max_date).to.exist.and.to.be.a('string');\r",
							"        pm.expect(photo.rover.total_photos).to.exist.and.to.be.a('number');\r",
							"        pm.expect(photo.rover.cameras).to.exist.and.to.be.an('array');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Header Keys/Values check\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.include(\"*\");\r",
							"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"max-age=0, private, must-revalidate\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Encoding\")).to.include(\"gzip\");\r",
							"    pm.expect(pm.response.headers.get(\"Etag\")).to.include('W/\"8b8fc6586cc96e4c9f1446410cebc57a\"');\r",
							"    pm.expect(pm.response.headers.get(\"Via\")).to.include(\"1.1 vegur, https/1.1 api-umbrella (ApacheTrafficServer [cMsSf ])\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Cache\")).to.include(\"MISS\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.include(\"nosniff\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Download-Options\")).to.include(\"noopen\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Permitted-Cross-Domain-Policies\")).to.include(\"none\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Ratelimit-Limit\")).to.include(\"40\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Xss-Protection\")).to.include(\"1; mode=block\");\r",
							"    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.include(\"SAMEORIGIN\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.include(\"chunked\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response body against a specific schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('photos').that.is.an('array').with.length.above(0);\r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(photo).to.have.property('sol').that.is.a('number');\r",
							"        pm.expect(photo).to.have.property('camera').that.is.an('object').and.not.empty;\r",
							"        pm.expect(photo).to.have.property('img_src').that.is.a('string');\r",
							"        pm.expect(photo).to.have.property('earth_date').that.is.a('string');\r",
							"        pm.expect(photo).to.have.property('rover').that.is.an('object').and.not.empty;\r",
							"        pm.expect(photo.rover).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(photo.rover).to.have.property('name').that.is.a('string');\r",
							"        pm.expect(photo.rover).to.have.property('landing_date').that.is.a('string');\r",
							"        pm.expect(photo.rover).to.have.property('launch_date').that.is.a('string');\r",
							"        pm.expect(photo.rover).to.have.property('status').that.is.a('string');\r",
							"        pm.expect(photo.rover).to.have.property('max_sol').that.is.a('number');\r",
							"        pm.expect(photo.rover).to.have.property('max_date').that.is.a('string');\r",
							"        pm.expect(photo.rover).to.have.property('total_photos').that.is.a('number');\r",
							"        pm.expect(photo.rover).to.have.property('cameras').that.is.an('array').with.length.above(0);\r",
							"        photo.rover.cameras.forEach(function(camera) {\r",
							"            pm.expect(camera).to.have.property('name').that.is.a('string');\r",
							"            pm.expect(camera).to.have.property('full_name').that.is.a('string');\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Check for any duplicate IDs within the photos array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.photos).to.be.an('array');\r",
							"\r",
							"    const idSet = new Set();\r",
							"    let hasDuplicate = false;\r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        if (idSet.has(photo.id)) {\r",
							"            hasDuplicate = true;\r",
							"            return;\r",
							"        }\r",
							"        idSet.add(photo.id);\r",
							"    });\r",
							"\r",
							"    pm.expect(hasDuplicate).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Sol value is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.photos).to.be.an('array');\r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo.sol).to.be.a('number').and.to.satisfy((sol) => sol > 0, \"Sol value should be a positive integer\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Name and full_name in camera object are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.photos).to.be.an('array').and.not.empty;\r",
							"    \r",
							"    responseData.photos.forEach(function(photo) {\r",
							"        pm.expect(photo.camera).to.be.an('object');\r",
							"        pm.expect(photo.camera.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"        pm.expect(photo.camera.full_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Full name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\",function() {\r",
							"   const responseData = pm.response.json();\r",
							"\r",
							"   responseData.photos.forEach(function(photo){\r",
							"       pm.expect(photo.rover.cameras.map(camera => camera.name)).to.include.members([\"FHAZ\",\"NAVCAM\",\"MAST\",\"CHEMCAM\",\"MAHLI\",\"MARDI\",\"RHAZ\"]);\r",
							"   });\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\",function() {\r",
							"   const responseData = pm.response.json();\r",
							"\r",
							"   responseData.photos.forEach(function(photo){\r",
							"       pm.expect(photo.rover.cameras.map(camera => camera.full_name)).to.include.members([\"Front Hazard Avoidance Camera\",\"Navigation Camera\",\"Mast Camera\",\"Chemistry and Camera Complex\",\"Mars Descent Imager\",\"Mars Hand Lens Imager\",\"Rear Hazard Avoidance Camera\"]);\r",
							"   });\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&api_key=DEMO_KEY",
					"protocol": "https",
					"host": [
						"api",
						"nasa",
						"gov"
					],
					"path": [
						"mars-photos",
						"api",
						"v1",
						"rovers",
						"curiosity",
						"photos"
					],
					"query": [
						{
							"key": "earth_date",
							"value": "2015-6-3"
						},
						{
							"key": "api_key",
							"value": "DEMO_KEY"
						}
					]
				}
			},
			"response": []
		}
	]
}